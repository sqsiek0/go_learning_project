// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO
    users (
        id, createdat, updatedat, name, surname
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, createdat, updatedat, name, surname
`

type CreateUserParams struct {
	ID        uuid.UUID
	Createdat time.Time
	Updatedat time.Time
	Name      string
	Surname   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Createdat,
		arg.Updatedat,
		arg.Name,
		arg.Surname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Name,
		&i.Surname,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, createdat, updatedat, name, surname FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Name,
			&i.Surname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
